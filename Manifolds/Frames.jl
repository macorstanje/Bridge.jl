using ForwardDiff

include("Definitions.jl")
# Returns a base if the ambient space is of dimension 3 for ùëá‚Çì‚Ñ≥
struct TangentSpace{Tx,TM}
    x::Tx
    ‚Ñ≥::TM
    base
    function TangentSpace(x::Tx, ‚Ñ≥::TM) where {Tx <: AbstractArray, TM <: EmbeddedManifold}
        ‚àáf = ForwardDiff.gradient( (y)->f(y,‚Ñ≥) , x)
        if ‚àáf[1] == 0. && ‚àáf[2] == 0
            e‚ÇÅ = [1.,0.,0.]
        else
            e‚ÇÅ::Tx = normalize([-‚àáf[2], ‚àáf[1], 0.])
        end
        e‚ÇÇ::Tx = normalize(cross(‚àáf, e‚ÇÅ))
        e‚ÇÉ::Tx = normalize(‚àáf)
        base = (e‚ÇÅ, e‚ÇÇ, e‚ÇÉ)
        new{Tx,TM}(x, ‚Ñ≥, base)
    end
end

# Projection onto a tangent space in terms of the basis specified in the struct
function P(T::TangentSpace)
    x = T.x
    ‚Ñ≥ = T.‚Ñ≥
    e‚ÇÅ, e‚ÇÇ, e‚ÇÉ = T.base
    return [1. 0. 0. ; 0. 1. 0. ]*inv([e‚ÇÅ e‚ÇÇ e‚ÇÉ])*P(x, ‚Ñ≥)
end


"""
    Elements of F(‚Ñ≥) consist of a position x and a GL(d, ‚Ñù)-matrix ŒΩ that
    represents a basis for ùëá‚Çì‚Ñ≥
"""

struct Frame{Tx, TŒΩ}
    x::Tx
    ŒΩ::TŒΩ
    function Frame(x::Tx, ŒΩ::TŒΩ) where {Tx, TŒΩ <: AbstractArray}
        # if rank(ŒΩ) != length(x)
        #     error("A is not of full rank")
        # end
        new{Tx, TŒΩ}(x, ŒΩ)
    end
end

"""
    Some generic functions for calculations on F(‚Ñ≥)
"""

Base.:+(u::Frame{Tx, TŒΩ}, v::Frame{Tx, TŒΩ}) where {Tx, TŒΩ} = Frame(u.x + v.x , u.ŒΩ .+ v.ŒΩ)
Base.:-(u::Frame{Tx, TŒΩ}, v::Frame{Tx, TŒΩ}) where {Tx, TŒΩ} = Frame(u.x - v.x , u.ŒΩ .- v.ŒΩ)
Base.:-(u::Frame{Tx, TŒΩ}) where {Tx, TŒΩ} = Frame(-u.x , -u.ŒΩ)

Base.:+(u::Frame{Tx, TŒΩ}, y::Tx) where {Tx, TŒΩ} = Frame(u.x + y, u.ŒΩ)
Base.zero(u::Frame{Tx, TŒΩ}) where {Tx, TŒΩ} = Frame(zero(u.x), one(u.ŒΩ))

# Canonical projection
Œ†(u::Frame{Tx, TŒΩ}) where {Tx,TŒΩ} = u.x

# The group action of a frame on ‚Ñù·µà
FrameAction(u::Frame{Tx, TŒΩ}, e::T) where {Tx,TŒΩ,T<:AbstractArray} = u.ŒΩ*e

# Horizontal lift of the orthogonal projection
PÀ£(u::Frame, ‚Ñ≥::T) where {T<:EmbeddedManifold} = P(u.x, ‚Ñ≥)

# Functions for solving SDEs on the frame bundle
include("FrameBundles.jl")

"""
    Now let us create a stochastic process on the frame bundle of the 2-sphere ùïä¬≤
"""


struct SphereDiffusion <: FrameBundleProcess
    ùïä::Sphere

    function SphereDiffusion(ùïä::Sphere)
        new(ùïä)
    end
end

Bridge.b(t, u, ‚Ñô::SphereDiffusion) = Frame(zeros(3), zeros(3,3))
Bridge.œÉ(t, u, ‚Ñô::SphereDiffusion) = PÀ£(u, ùïä)
Bridge.constdiff(::SphereDiffusion) = false

‚Ñô = SphereDiffusion(ùïä)

x‚ÇÄ = [0.,0.,1.]
u‚ÇÄ = Frame(x‚ÇÄ, [2. 0. 0. ; 0. 1. 0. ; 0. 0. .5])

T = 1.0
dt = 1/1000
œÑ(T) = (x) -> x*(2-x/T)
tt = œÑ(T).(0.:dt:T)
W = sample(0:dt:T, Wiener{‚Ñù{3}}())
U = solve(StratonovichEuler(), u‚ÇÄ, W, ‚Ñô)
X  = SamplePath(tt, Œ†.(U.yy))

include("Sphereplots.jl")
plotly()
SpherePlot(X, ùïä)

function SimulatePoints(n, u‚ÇÄ, ‚Ñô::SphereDiffusion)
    out = Frame[]
    it = 0
    while length(out) < n
        W = sample(0.:dt:T, Wiener{‚Ñù{3}}())
        U = solve(StratonovichEuler(),u‚ÇÄ, W, ‚Ñô)
        push!(out, U.yy[end])
    end
    return out
end

@time Œæ = SimulatePoints(1000, u‚ÇÄ, ‚Ñô)

SphereScatterPlot(extractcomp(Œ†.(Œæ),1), extractcomp(Œ†.(Œæ),2), extractcomp(Œ†.(Œæ),3), x‚ÇÄ, ùïä )
